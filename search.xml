<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[异步JavaScript]]></title>
    <url>%2F2019%2F03%2F12%2F2019-03-12%2F</url>
    <content type="text"><![CDATA[好文必读1.理解异步 JavaScript 2.阮一峰-async 函数 3.async/await 执行顺序详解 promise、async和await之执行顺序的那点事]]></content>
      <tags>
        <tag>异步</tag>
        <tag>消息队列</tag>
        <tag>工作队列</tag>
        <tag>事件循环</tag>
        <tag>调用栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阅读React官方Doc笔记]]></title>
    <url>%2F2018%2F09%2F27%2F2018-09-27%2F</url>
    <content type="text"><![CDATA[React Doc 地址 1.false, null, undefined, and true are valid children. They simply don’t render. some ‘falsy’ values, such as the 0 number, are still rendered by React12345&lt;div&gt; &#123;props.messages.length &amp;&amp; &lt;MessageList messages=&#123;props.messages&#125; /&gt; &#125;&lt;/div&gt; 如果 props.messages.length === 0, 则会渲染出123&lt;div&gt; 0&lt;/div&gt; 需要注意的是： const res = true &amp;&amp; 1 &amp;&amp; &#39;haha&#39; &amp;&amp; 0, 这种写法 res 是等于0 而不是 false 2.ref、key 是不能通过props直接传递给组件的。ref 需要通过 React.createRef 来传递。 3.You may not use the ref attribute on functional components because they don’t have instances. 不能在函数式组件上使用ref属性，因为函数式组件没有实例。 You can, however, use the ref attribute inside a functional component as long as you refer to a DOM element or a class component。 4.关于Controlled Component 和 Uncontrolled Component，可以查看此文档:Controlled and uncontrolled form inputs in React don’t have to be complicated 5.React.Children相关，可查看全面解析children在react中的应用 6.如果多次调用setState,则React更新state的顺序和调用setState的顺序相同。具体可查看 stack overflow 上的问题： Does React keep the order for state updates? 7.在同一个cycle中多次调用setState,如下所示：123this.setState(&#123;quantity: state.quantity + 1&#125;)this.setState(&#123;quantity: state.quantity + 1&#125;)this.setState(&#123;quantity: state.quantity + 1&#125;) 相当于执行了123456Object.assign( previousState, &#123;quantity: state.quantity + 1&#125;, &#123;quantity: state.quantity + 1&#125;, ...) Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:123this.setState((state) =&gt; &#123; return &#123;quantity: state.quantity + 1&#125;;&#125;); 8.服务端渲染相关文档 为什么使用服务器端渲染(SSR)？- Vue官方文档 React16.x中的服务端渲染（SSR） React16中的服务端渲染（译） React 服务端渲染 ReactDOMServer Server Rending - Redux 9.in React, all DOM properties and attributes (including event handlers) should be camelCased. The exception is aria- and data- attributes, which should be lowercased. For example, you can keep aria-label as aria-label. 10.React 实现了一个“合成事件”层，这个事件层消除了 IE 与 W3C 标准实现之间的兼容问题。首先区分原生事件与合成事件，我们在 componentDidMount 方法里面通过 addEventListener 绑定的事件就是浏览器原生事件，使用原生事件的时候注意在 componentWillUnmount 解除绑定 removeEventListener，所有通过 JSX 这种方式绑定的事件都是绑定到“合成事件”。 “合成事件”会以事件委托（event delegation）的方式绑定到组件最上层，并且在组件卸载（unmount）的时候自动销毁绑定的事件。 Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method. 具体可以参考 React事件初探 不能使用异步的方式接收事件,详情查看 Event Pooling]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优秀文章，多读几遍]]></title>
    <url>%2F2018%2F08%2F08%2F%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%EF%BC%8C%E5%A4%9A%E8%AF%BB%E5%87%A0%E9%81%8D%2F</url>
    <content type="text"><![CDATA[理解CSS中的BFC(块级可视化上下文) white-space、word-wrap和word-break的简单整理 CSS中margin相关 JavaScript 深拷贝性能分析 clientheight、offsetheight、scrollheight详解 - CSDN博客 offsettop及相关属性介绍 受控组件和非受控组件 IntersectionObserver学习笔记]]></content>
  </entry>
  <entry>
    <title><![CDATA[正则表达式随笔]]></title>
    <url>%2F2018%2F05%2F23%2F2018-05-23%2F</url>
    <content type="text"><![CDATA[正则表达式文档-MDN 对全局匹配来说，str的match方法返回所有匹配的值组成的数组（如果match不到匹配的，返回null）， 而 reg的exec方法一次只返回一个匹配的值 但是match在reg为全局匹配时，无法获取捕获组的值， exec可以获取。 判断输入框里是否有除数字以外的字符时，因为输入框里的value可能是这种格式&#39;123a&#39;、&#39;123&#39;’、123、&#39;a123&#39;,用Number和parseInt需要考虑的情况比较多，用正则表达式来判断比较简单。 const reg = /\D/ 上述reg表示除数字外的任意字符, 注意正则表达式后面不要加 g, 因为exec的全局匹配不是真正的全局匹配，比如 /\d/g.exec(&#39;1abc23d5&#39;) 会首先返回 1，运行第二次返回 2，依次检索到最后一个并返回5，这个时候 再次运行就会返回null,而如果不加g的话，就会一直返回匹配的第一个，这样只要有匹配的就会把匹配的第一个值返回，而不会出现返回null 的情况 reg.test(value) 不管value是字符串类型还是数字类型，只要其中含有除数字以外的字符，就返回true,上述方法相当于 reg.exec(value) !== null 从一个字符串中取出某一部分有以下几种方法。 假设有一个字符串str, 要取出中括号中的内容,并将其拼接在一起： 1const str = '【哈哈】随便几个字【名字】'; 方法1： 1const result = str.replace(/【(.*)】.*【(.*)】/, '$2：$1'); // "名字：哈哈" 方法2： 123const reg = /【(.*)】.*【(.*)】/;const matchs = str.match(reg); // ["【哈哈】随便几个字【名字】", "哈哈", "名字"]const result = `$&#123;matchs[2]&#125;: $&#123;matchs[1]&#125;`; // "名字：哈哈" 方法3： 123const reg = /【(.*)】.*【(.*)】/;const matchs = reg.exec(str); // ["【哈哈】随便几个字【名字】", "哈哈", "名字"]const result = `$&#123;matchs[2]&#125;: $&#123;matchs[1]&#125;`; // "名字：哈哈" 这里要注意，对于汉字,匹配的时候不能使用\w,因为\w只匹配字母数字和下划线]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过Provider向子孙组件传递store]]></title>
    <url>%2F2018%2F05%2F21%2F2018-05-21%2F</url>
    <content type="text"><![CDATA[ProviderProvider也是一个普通的组件，其具体介绍可见 官方文档 和 知乎Provider &lt;Provider store={store}&gt; &lt;App /&gt; &lt;/Provider&gt; //&lt;App /&gt; &lt;div&gt; &lt;Business /&gt; &lt;Stock /&gt; &lt;Common /&gt; &lt;/div&gt; 上面代码通过Provider向组件&lt;App /&gt;中传递store， 这里要注意，Provider不仅向&lt;App /&gt;传递store，而且也向&lt;App /&gt;的子孙组件传递， 所以只要一个组件的祖先是&lt;App /&gt;,那这个组件就可以拿到store。 如果一个组件的祖先被Provider包裹并传入store，那么这个组件就可以用connect将组件与Redux.store绑定，如果connect函数传入了第一个参数mapStateToProps，则组件可以根据该参数选择要传入组件的属性值。 使用中注意事项如果在&lt;App /&gt;及其子孙组件中，通过appendChild添加新的节点，则该节点的祖先虽然也是&lt;App /&gt;，但是其无法拿到store，挂载在该节点上的组件也无法使用connect注入props.]]></content>
      <categories>
        <category>react-redux</category>
      </categories>
      <tags>
        <tag>provider</tag>
        <tag>store</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对Promise的理解]]></title>
    <url>%2F2018%2F05%2F10%2F2018-05-10%2F</url>
    <content type="text"><![CDATA[新建Promise实例时传入的函数的参数与回调函数的关系 部分内容引用自阮一峰-Promise 新建一个Promise实例：123456789const promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。12345promise.then(function(value) &#123; // success&#125;, function(error) &#123; // failure&#125;); 在创建Promise实例时，传入的函数有两个参数resolve和reject都是函数，这两个参数由JavaScript引擎提供，resolve函数用来将Promise实例的状态从Pending变为resolved,并通过resolve(value)的形式从Promise中返回value值。 在Promise实例状态从pending变为resolved后，then()方法中指定的第一个回调函数接受上述返回值value将其作为参数并执行。 容易产生的误区： 1.不要把回调函数当做创建Primise时传入的函数的参数resolve和reject,即使Promise没有回调函数，在创建时依然由Javascript引擎提供了resolve和reject，这两个参数只负责改变Promise实例的状态，并从Promise实例中返回值，then()中的回调函数只是接受了这个返回值而已。 2.then()中的回调函数指的是Promise实例状态改变时的回调函数，只要在Promise创建时执行了resolve或者reject，那么就会去调用回调函数，不论Promise实例是否有返回值。也就是说，resolve()和resolve(value)都会触发Promise状态改变，都会调用then中的第一个回调函数。 Promise链中then是如何传递参数的 这部分的详细内容可以参考Promise#then function doubleUp(value) { return value * 2; } function increment(value) { return value + 1; } function output(value) { console.log(value);// =&gt; (1 + 1) * 2 } var promise = Promise.resolve(1); promise .then(increment) .then(doubleUp) .then(output) .catch(function(error){ // promise chain中出现异常的时候会被调用 console.error(error); }); 在第一个then的回调函数increment中,返回了一个值 1 * 2，但是这个值是怎么传给第二个then的回调函数doubleUp里面做参数呢？这个问题我很长一段时间里都没搞明白，只知道怎么用不知道怎么传的。 实际上在increment函数里 return 2的时候, Promise对返回值进行了封装，相当于执行了 return new Promise.resolve(2) //如果increment函数没有返回值，则只返回一个Promise实例，相当于执行了 return new Promise.resolve() //如果发生错误的话，也可能返回 return new Promise.reject(new Error(&apos;发生了错误&apos;)) 所以每一个then函数都会返回一个新的resolved或reject状态的Promise实例，并将返回值传入下一个then的回调函数作为参数 await 与 Promise 阮一峰 async函数介绍 理解透彻这个 async await、Promise、setTimeout执行顺序 1.在async函数内部，我们可以认为 当 await 某个 Promise 时，函数暂停执行，直至该 Promise 产生结果，并且暂停并不会阻塞主线程，也就是会继续执行 async 函数外的逻辑。 利用await的这种特性可以做延时，如下：1234567891011async function test() &#123; let xx = 1234; await new Promise((resolve) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(); &#125;, 2000); &#125;); // 然后再执行需要延时后再处理的逻辑 xx = 5678;&#125; 上面代码中xx = 5678是在2秒延时后再执行的。 await 中的 promise 如果没有执行 resolve 或者 reject，则 await 后面的逻辑永远不会执行到。如下：1234567891011async function test() &#123; let xx = 1234; await new Promise((resolve) =&gt; &#123; setTimeout(() =&gt; &#123; // resolve(); &#125;, 2000); &#125;); // 下面的逻辑永远执行不到 xx = 5678;&#125; 2.当一个 async 函数被调用，它返回一个 Promise。当 async 函数返回一个值，它不是一个 Promise，Promise 将会被自动创建，然后它使用函数的返回值来决定状态。当 async 抛出一个异常，Promise 使用抛出的值进入已失败状态。]]></content>
      <tags>
        <tag>JS</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2F2018%2F05%2F05%2F2018-05-05%2F</url>
    <content type="text"><![CDATA[Javascript 高级程序设计读书笔记 Array的操作方法中，push()、pop()、shift()、unshift()、reverse()、 sort() 、splice()都是直接对数组进行操作，数组本身会发生变化，可以称为数组的变异方法. 而concat()、slice()不是对数组本身进行操作，而是对数组的副本进行操作，故数组本身不会发生变化。 数组的迭代方法有五种，every(), filter(), forEach() ,map(), some().其中除了forEach()方法外都有返回值，所以可以利用返回值进行赋值。那么forEach()没有返回值还有什么用处呢，参考链接http://www.cnblogs.com/shuiyi/p/5058524.html.如果数组中的值为基本类型值，则这五种方法都不会改变数组本身的值，如果数组中有对象，应该避免改变对象的值，可以采用如下的方法： 12345const arr = [&#123;a: 1&#125;, &#123;a: 2&#125;];arr.map((item) =&gt; &#123; return Object.assign(&#123;&#125;, item, &#123;a: item.a + 1&#125;);&#125;);console.log(arr); // [&#123;a: 1&#125;, &#123;a: 2&#125;]; 而非下面这种直接改变arr值的方式： 123456const arr = [&#123;a: 1&#125;, &#123;a: 2&#125;];arr.map((item) =&gt; &#123; item.a += 1; return item;&#125;);console.log(arr); // [&#123;a: 2&#125;, &#123;a: 3&#125;]; Date.parse(args) 和 Date.UTC(args) 都是返回指定日期的毫秒数，只是参数的格式不同。Date.now()返回调用这个方法时的日期和时间的毫秒数。 所谓没有块级作用域，就是 1234if (true) &#123; var str = 'abc';&#125;console.log(str) //abc for也一样，里面的变量外面可以直接用。但是let 和 const定义的变量有块级作用域，比如: 1234if (true) &#123; const str = ‘abc’;&#125;console.log(str) //Uncaught ReferenceError: str is not defined slice()、substring()、sbustr()三个方法的相同处：都是基于一个字符串创建一个新字符串，第一个参数都是指定字符串的开始位置。不同处：slice和substring第二个参数指定的是子字符串最后一个字符后面的位置。而substr的第二个参数指定的返回的字符个数。 但是substr 和 substring 不能用于截取数组。截取数组可以用slice 和 splice 。要取字符串的最后一个字符，可以用 str.slice( -1 ) 字符串的search()参数是一个字符串或者正则表达式，返回字符串中第一个匹配项的索引。字符串的和replace()方法第一个参数是字符串或者正则表达式，第二个参数可以是一个字符串或者一个函数。如果第一个参数时字符串，那么只会替换第一个子字符串，要想替换所有字符串，唯一的方法就是第一个参数是正则表达式，并且要指定全局变量。 平常开发的时候，如果未切换分支就改了代码，改到一半想才想起来切换分支，可以直接切换到分支 gco -b newbranch,发现之前的改动已经自动到新分支了，并没有因为切换分支而消失。这说明本地的修改和分支不是绑定的。 git commit --amend 命令用来增补提交，也就是将最近一次的commit -m &#39;message&#39;中的message修改为新的message，具体使用方式可以直接git commit --amend -m &#39;newMessage&#39; 参考text-overflow属性 内联元素使用 text-overflow: ellipsis （超过指定宽度就加省略号）的时候，要加上 width: px ，如果是行内元素，还要再加上display: inline-block; white-space: no-wrap;(强制不换行,不加的话可能会没有省略号） 行内元素使用text-overflow: ellipsis的代码如下,其中每个都不可或缺。 12345display: inline-block;width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: no-wrap; 块级元素使用text-overflow: ellipsis的代码如下,其中每个都不可或缺。 1234width: 100px;overflow: hidden;text-overflow: ellipsis;white-space: no-wrap; 在react 的render里，img标签的src不能是字符串，而应该是用 { } 来包裹着，直接写 src=&apos;../styles/images/xx.png&apos; 是不对的，应该写作： src={&apos;../styles/images/xx.png&apos;} 来自 redux 的方法： createStore , combineReducers , bindActionCreators, applyMiddleware, compose export default combineReducers({ todos, counter }) 1const APP = createStore(reducers); 12345function mapDispatchToProps(dispatch) &#123; return &#123; action: bindActionCreators(actions, dispatch); &#125; &#125; 来自react-redux的方法： connect , Provider 1cosnt 容器组件 = connect(mapStateToProps, matDispatchToProps)(UI组件); 123456render( &lt;Provider store=&#123;store&#125;&gt; //Provider的唯一功能就是传入store对象。 &lt;App /&gt; &lt;/Provider&gt;, document.getElementById('root')) 上面代码中，Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。此处可以参考我的另一篇文章 通过Provider向子孙组件传递store 来自 react-router 的方法： browserHistory , Route , Router browserHistory.push(&apos;./src/upload&apos;); //跳转到指定地址 replace也是browserHistory的一个方法。 123456 &lt;Route path="messages/:id" onEnter=&#123; (&#123;params&#125;, replace) =&gt; replace(`/messages/$&#123;params.id&#125;`) &#125;/&gt; npm 安装依赖包的时候-save-dev 是指将包信息添加到 package.json 里的 devDependencies节点，表示开发时依赖的包。-save 是指将包信息添加到 package.json 里的dependencies节点，表示发布时依赖的包。 find方法找不到值时，返回undefined. filter方法找不到值时返回空数组。 [1, 2].find(item =&gt; item &gt; 3) // undefined [1, 2].filter(item =&gt; item &gt; 3) // [] 一个对象的属性名可以是任何有效的 JavaScript 字符串，或者可以被转换为字符串的任何类型，包括空字符串。然而，一个属性的名称如果不是一个有效的 JavaScript 标识符（例如，一个由空格或连字符，或者以数字开头的属性名），就只能通过方括号标记访问。这个标记法在属性名称是动态判定（属性名只有到运行时才能判定）时非常有用，参考对象和属性-MDN; 给组件传递动态classnames时，可以使用classnames库，也可以采用如下方法： 1234567var showB = false;var classnames = [ 'classA', showB ? 'classB' : '', 'classC',].join(' '); 16.undefined (value) 是 Undefined 类型的唯一的值。任何未被赋值的属性都被假定为 undefined（ECMA 4.3.9 和 4.3.10）。没有 return 语句的函数，或者 return 空的函数将返回 undefined。函数中没有被定义的参数的值也被认为是 undefined。 17.call()、apply() 和 bind()方法介绍, 看完基本就懂了。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[父元素与子元素的包裹与撑开问题]]></title>
    <url>%2F2018%2F05%2F04%2F2018-05-04%2F</url>
    <content type="text"><![CDATA[父元素有固定高度 父元素样式 : 子元素为相对定位 : 子元素为绝对定位 : 由此可见，当父元素设置为相对定位，有固定高度height时，子元素不论是相对定位还是绝对定位，都无法撑开父元素高度。 父元素没有设置高度父元素样式 : 子元素为相对定位 : 子元素为绝对定位 : 由此可见，当父元素没有固定高度，子元素为相对定位可以撑开父元素高度，子元素为绝对定位无法撑开父元素高度。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>relative</tag>
        <tag>absolute</tag>
        <tag>父子元素</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内联元素的padding和margin对其定位的影响]]></title>
    <url>%2F2018%2F05%2F03%2FcssPaddingMargin%2F</url>
    <content type="text"><![CDATA[padding对内联元素位置的影响 内联元素未添加padding和margin时 padding-left和padding-right可以左右其位置，影响其水平方向的布局 padding-top和padding-bottom 也有作用，但是并不会影响其布局 margin 对内联元素位置的影响 margin-left和margin-right也可以左右其位置 margin-top和margin-bottom对其定位没有影响]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>padding</tag>
        <tag>margin</tag>
      </tags>
  </entry>
</search>
